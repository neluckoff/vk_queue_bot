import csv
from vkbottle.bot import Blueprint, Message
from data.strings import *
from data.keyboards import *
from misc.vk_queue import Users
from settings import path
import sqlite3

vk = Blueprint("Only users chat command")

"""
–ú–æ–¥—É–ª—å —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""


@vk.on.private_message(text=['–ù–∞—á–∞—Ç—å', '–ö—É', '–ü—Ä–∏–≤–µ—Ç'])
async def hello(message: Message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    await message.answer(hello_str, keyboard=keyboard_hello)


@vk.on.private_message(text='–ú–µ–Ω—é')
async def menu(message: Message):
    """–í—ã–∑–æ–≤ –º–µ–Ω—é —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    user = await vk.api.users.get(message.from_id)
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users_info(
            id INTEGER,
            first_name TEXT,
            last_name TEXT
        )""")
    connect.commit()

    cursor.execute(f"SELECT id FROM users_info WHERE id = {user[0].id}")

    if cursor.fetchone() is None:
        print(f'New user - {user[0].id} - {user[0].first_name} {user[0].last_name}')
        cursor.execute(f"INSERT INTO users_info VALUES (?, ?, ?);",
                       (user[0].id, user[0].first_name, user[0].last_name))
        connect.commit()
    await message.answer(menu_str, keyboard=keyboard_menu)


@vk.on.private_message(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
async def check_q(message: Message):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å"""
    if new_queue.is_empty():
        await message.answer(queue_was_empty)
    else:
        array_q = new_queue.print_queue()
        new_str = ''
        count = 1
        for i in array_q:
            new_str += f'{count}. {i}\n'
            count += 1
        await message.answer(new_str)


@vk.on.private_message(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')
async def shaffle_q(message: Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—á–µ—Ä–µ–¥–∏"""
    if new_queue.is_empty():
        await message.answer(queue_not_created)
    else:
        user = await vk.api.users.get(message.from_id)
        person = Users(user[0].id, user[0].first_name, user[0].last_name)
        if user[0].id in check:
            await message.answer("üìå –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            new_queue.add_to_queue(person)
            check.append(user[0].id)
            await message.answer(queue_joined)


@vk.on.private_message(text='–û—Ç–≤–µ—Ç–∏–ª')
async def answer_q(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞,
    —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    user = await vk.api.users.get(message.from_id)
    if new_queue.is_empty():
        pass
    else:
        if new_queue.get_first().get_id() == user[0].id:
            id = new_queue.get_first().get_id()
            await vk.api.messages.send(peer_id=id, message=f'{random_end_answer()} {random_cool_smile()}', random_id=0)
            new_queue.del_person(0)

            if new_queue.is_empty():
                pass
            else:
                id = new_queue.get_first().get_id()
                await vk.api.messages.send(peer_id=id, message=your_next, random_id=0, keyboard=keyboard_answer)
        else:
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!")


@vk.on.private_message(text='–í—ã–π—Ç–∏')
async def exit_q(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    if new_queue.is_empty():
        await message.answer(queue_not_created)
    else:
        user = await vk.api.users.get(message.from_id)
        if user[0].id in new_queue.search_by_id():
            a = new_queue.search_by_id()
            new_queue.del_person(a.index(user[0].id))
            await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        else:
            await message.answer("üìå –í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.")
